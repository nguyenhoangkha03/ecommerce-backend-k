const {
  Product,
  Category,
  Order,
  OrderItem,
  User,
  Cart,
  CartItem,
  sequelize,
} = require('../models');
const { Op } = require('sequelize');
const chatbotService = require('../services/chatbot.service');
const geminiChatbotService = require('../services/geminiChatbot.service');

// Initialize Gemini AI only if API key is available
let genAI = null;
try {
  if (process.env.GEMINI_API_KEY && process.env.GEMINI_API_KEY !== 'demo-key') {
    const { GoogleGenerativeAI } = require('@google/generative-ai');
    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  }
} catch (error) {
  console.log('Google Generative AI not available, using fallback responses');
}

class ChatbotController {
  // V·∫™N ƒêANG S·ª¨ D·ª§NG - Main endpoint x·ª≠ l√Ω tin nh·∫Øn chat v·ªõi AI (POST /api/chatbot/message)
  async handleMessage(req, res) {
    try {
      // PARSE INPUT: Destructure d·ªØ li·ªáu t·ª´ request body
      const { message, userId, sessionId, context = {} } = req.body;
      
      // DEBUG LOG: In th√¥ng tin request ƒë·ªÉ debugging (ch·ªâ khi c·∫ßn)
      console.log('Received chatbot message:', { message, userId, sessionId });

      // VALIDATION: Ki·ªÉm tra message kh√¥ng ƒë∆∞·ª£c r·ªóng ho·∫∑c ch·ªâ ch·ª©a spaces
      if (!message?.trim()) {
        return res.status(400).json({
          status: 'error',
          message: 'Message is required',
        });
      }

      // AI PROCESSING: G·ª≠i tin nh·∫Øn t·ªõi Gemini AI service ƒë·ªÉ x·ª≠ l√Ω th√¥ng minh
      // Pass c·∫£ userId, sessionId v√† context ƒë·ªÉ AI c√≥ th·ªÉ personalize response
      const response = await geminiChatbotService.handleMessage(message, {
        userId,        // ID user ƒë·ªÉ l·∫•y purchase history
        sessionId,     // Session ƒë·ªÉ track conversation flow
        ...context,    // Context t·ª´ frontend (currentPage, userAgent, etc.)
      });

      // SUCCESS RESPONSE: Tr·∫£ v·ªÅ k·∫øt qu·∫£ AI ƒë√£ x·ª≠ l√Ω
      res.json({
        status: 'success',
        data: response,  // Contains: {response, products, suggestions, intent}
      });
    } catch (error) {
      // ERROR HANDLING: Log chi ti·∫øt l·ªói ƒë·ªÉ debugging
      console.error('Chatbot error:', error);
      console.error('Error stack:', error.stack);
      
      // GRACEFUL FAILURE: Tr·∫£ v·ªÅ response th√¢n thi·ªán thay v√¨ crash
      res.status(500).json({
        status: 'error',
        message: 'Failed to process message',
        data: {
          // Fallback response ƒë·ªÉ user kh√¥ng th·∫•y error message technical
          response:
            'Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t v·∫•n ƒë·ªÅ. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t nh√©! üòÖ',
          // Provide alternative actions user c√≥ th·ªÉ l√†m
          suggestions: ['Xem s·∫£n ph·∫©m hot', 'T√¨m khuy·∫øn m√£i', 'Li√™n h·ªá h·ªó tr·ª£'],
        },
      });
    }
  }

  // @deprecated - ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ B·ªûI GEMINI AI - Legacy product search logic
  async handleProductSearch(message, intent, userProfile, context) {
    try {
      // STEP 1: Tr√≠ch xu·∫•t tham s·ªë t√¨m ki·∫øm t·ª´ natural language
      // VD: "v·ª£t yonex d∆∞·ªõi 2 tri·ªáu" ‚Üí {category: "v·ª£t", brand: "yonex", maxPrice: 2000000}
      const searchParams = chatbotService.extractSearchParams(message);

      // STEP 2: Query database v·ªõi c√°c tham s·ªë ƒë√£ extract
      const products = await this.searchProducts(searchParams);

      // STEP 3: Generate AI response text m√¥ t·∫£ k·∫øt qu·∫£ t√¨m ki·∫øm
      const aiResponse = await this.generateAIResponse(
        `T√¨m s·∫£n ph·∫©m: ${message}`,
        { products, userProfile, searchParams }  // Context cho AI
      );

      // STEP 4: Format s·∫£n ph·∫©m th√†nh product cards cho frontend
      const productCards = products.slice(0, 5).map((product) => ({
        id: product.id,
        name: product.name,
        price: product.price,
        compareAtPrice: product.compareAtPrice,
        thumbnail: product.thumbnail,
        inStock: product.inStock,
        rating: product.rating || 4.5,  // Default rating n·∫øu ch∆∞a c√≥ reviews
        // T√≠nh % discount n·∫øu c√≥ compareAtPrice (gi√° g·ªëc)
        discount: product.compareAtPrice
          ? Math.round(
              ((product.compareAtPrice - product.price) /
                product.compareAtPrice) *
                100
            )
          : 0,  // Kh√¥ng sale n·∫øu kh√¥ng c√≥ compareAtPrice
      }));

      // RETURN: Structured response v·ªõi AI text + products + suggestions
      return {
        response: aiResponse,           // AI-generated description
        products: productCards,         // Formatted product list
        suggestions: [                  // Action buttons cho user
          'Xem th√™m s·∫£n ph·∫©m t∆∞∆°ng t·ª±',
          'So s√°nh gi√°',
          'Xem khuy·∫øn m√£i',
          'Th√™m v√†o gi·ªè h√†ng',
        ],
        actions:                        // Deep-link actions
          products.length > 0
            ? [
                {
                  type: 'view_products',
                  label: `Xem t·∫•t c·∫£ ${products.length} s·∫£n ph·∫©m`,
                  url: `/products?search=${encodeURIComponent(message)}`,  // URL c√≥ search query
                },
              ]
            : [],  // Kh√¥ng c√≥ action n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
      };
    } catch (error) {
      console.error('Product search error:', error);
      throw error;  // Re-throw ƒë·ªÉ caller handle
    }
  }

  // @deprecated - ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ B·ªûI GEMINI AI - Legacy recommendation engine
  async handleProductRecommendation(message, intent, userProfile, context) {
    try {
      // PERSONALIZED ENGINE: L·∫•y g·ª£i √Ω d·ª±a tr√™n behavioral analysis
      const recommendations =
        await chatbotService.getPersonalizedRecommendations(
          userProfile?.id,    // User ID ƒë·ªÉ ph√¢n t√≠ch purchase history
          intent.params       // Parameters t·ª´ intent (type, limit, etc.)
        );

      // AI RESPONSE: Generate text m√¥ t·∫£ l√Ω do g·ª£i √Ω nh·ªØng s·∫£n ph·∫©m n√†y
      const aiResponse = await this.generateAIResponse(
        `G·ª£i √Ω s·∫£n ph·∫©m: ${message}`,
        { recommendations, userProfile }  // Context ƒë·ªÉ AI personalize response
      );

      // RETURN: C·∫•u tr√∫c response chu·∫©n
      return {
        response: aiResponse,         // AI explanation cho recommendations
        products: recommendations,    // Danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω
        suggestions: [                // Follow-up actions
          'Xem chi ti·∫øt s·∫£n ph·∫©m',
          'So s√°nh c√°c s·∫£n ph·∫©m',
          'T√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª±',
          'Th√™m v√†o gi·ªè h√†ng',
        ],
      };
    } catch (error) {
      console.error('Product recommendation error:', error);
      throw error;
    }
  }

  // @deprecated - ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ B·ªûI GEMINI AI - Sales conversion engine v·ªõi psychology triggers
  async handleSalesPitch(message, intent, userProfile, context) {
    try {
      // DATA COLLECTION: L·∫•y data c·∫ßn thi·∫øt cho sales pitch
      const bestDeals = await this.getBestDeals();           // Top discount products
      const trendingProducts = await this.getTrendingProducts(); // Popular/featured items

      // PSYCHOLOGY ENGINE: T·∫°o pitch ƒë∆∞·ª£c personalize theo user profile
      // S·ª≠ d·ª•ng c√°c techniques: urgency, social proof, value proposition, scarcity
      const personalizedPitch = await chatbotService.generateSalesPitch({
        userProfile,      // User behavior data ƒë·ªÉ ch·ªçn pitch type
        message,          // Original message ƒë·ªÉ understand context
        bestDeals,        // Products c√≥ discount cao
        trendingProducts, // Products ƒëang hot
        context,          // Time of day, current page, etc.
      });

      // RETURN: High-conversion response v·ªõi CTA buttons
      return {
        response: personalizedPitch.text,      // AI-crafted sales message
        products: personalizedPitch.products,  // Products ph√π h·ª£p v·ªõi pitch
        suggestions: [                         // Action-oriented CTAs
          'üí≥ Mua ngay - ∆Øu ƒë√£i c√≥ h·∫°n!',     // Urgency + convenience
          'üõí Th√™m v√†o gi·ªè h√†ng',              // Low-commitment action
          'üíù Xem th√™m khuy·∫øn m√£i',            // Discount hunting
          'üì± Li√™n h·ªá t∆∞ v·∫•n',                 // Human support escalation
        ],
        actions: [                             // Deep-link actions v·ªõi urgency
          {
            type: 'urgent_deals',
            label: 'üî• ∆Øu ƒëai s·∫Øp h·∫øt h·∫°n - Mua ngay!',
            url: '/deals',                     // Direct to deals page
          },
          {
            type: 'bestsellers',
            label: '‚≠ê S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t',
            url: '/bestsellers',              // Social proof page
          },
        ],
      };
    } catch (error) {
      console.error('Sales pitch error:', error);
      throw error;
    }
  }

  // @deprecated - ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ B·ªûI GEMINI AI - Order support handler
  async handleOrderInquiry(message, intent, userProfile, context) {
    try {
      // AI SUPPORT: Generate contextual response cho order-related questions
      const aiResponse = await this.generateAIResponse(
        `H·ªó tr·ª£ ƒë∆°n h√†ng: ${message}`,
        { userProfile }  // User context ƒë·ªÉ personalize support
      );

      // RETURN: Support-focused response v·ªõi order management actions
      return {
        response: aiResponse,
        suggestions: [                    // Order-related quick actions
          'Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng', // Order tracking
          'Th√¥ng tin giao h√†ng',          // Shipping info
          'H·ªßy ƒë∆°n h√†ng',                 // Order cancellation
          'Li√™n h·ªá h·ªó tr·ª£',               // Escalate to human support
        ],
      };
    } catch (error) {
      console.error('Order inquiry error:', error);
      throw error;
    }
  }

  // @deprecated - ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ B·ªûI GEMINI AI - General customer support handler
  async handleSupport(message, intent, userProfile, context) {
    try {
      // AI SUPPORT: Generate helpful response cho general support questions
      const aiResponse = await this.generateAIResponse(
        `H·ªó tr·ª£ kh√°ch h√†ng: ${message}`,
        { userProfile }  // Context ƒë·ªÉ customize support level
      );

      // RETURN: Support-oriented response v·ªõi policy/help links
      return {
        response: aiResponse,
        suggestions: [               // Common support topics
          'Ch√≠nh s√°ch ƒë·ªïi tr·∫£',     // Return/exchange policy
          'H∆∞·ªõng d·∫´n mua h√†ng',     // Purchase guide
          'Th√¥ng tin b·∫£o h√†nh',     // Warranty info
          'Li√™n h·ªá hotline',        // Direct phone support
        ],
      };
    } catch (error) {
      console.error('Support error:', error);
      throw error;
    }
  }

  // @deprecated - ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ B·ªûI GEMINI AI - General conversation v·ªõi sales opportunity detection
  async handleGeneral(message, intent, userProfile, context) {
    try {
      // SALES OPPORTUNITY SCANNER: Lu√¥n t√¨m c∆° h·ªôi chuy·ªÉn ƒë·ªïi conversation th√†nh sales
      const salesOpportunity = await chatbotService.findSalesOpportunity(
        message,      // Scan message cho emotional/situational triggers
        userProfile   // User behavior ƒë·ªÉ assess sales potential
      );

      let response;
      
      // BRANCH 1: Sales opportunity detected ‚Üí Activate sales mode
      if (salesOpportunity.found) {
        response = await this.handleSalesPitch(
          message,
          salesOpportunity.intent,  // Contains trigger keyword v√† confidence
          userProfile,
          context
        );
      } else {
        // BRANCH 2: Normal conversation ‚Üí Still guide toward products
        const aiResponse = await this.generateAIResponse(message, {
          userProfile,  // Context ƒë·ªÉ personalize general response
        });
        
        response = {
          response: aiResponse,
          suggestions: [              // Always suggest product-related actions
            'T√¨m s·∫£n ph·∫©m hot üî•',   // Browse popular items
            'Xem khuy·∫øn m√£i üéâ',     // Check promotions
            'S·∫£n ph·∫©m b√°n ch·∫°y ‚≠ê',  // Social proof products
            'H·ªó tr·ª£ mua h√†ng üí¨',    // Purchase assistance
          ],
        };
      }

      return response;
    } catch (error) {
      console.error('General conversation error:', error);
      throw error;
    }
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - AI-powered product search endpoint (POST /api/chatbot/products/search)
  async aiProductSearch(req, res) {
    try {
      // PARSE PARAMS: L·∫•y search query v√† optional parameters
      const { query, userId, limit = 10 } = req.body;

      // VALIDATION: Ki·ªÉm tra query kh√¥ng ƒë∆∞·ª£c r·ªóng
      if (!query?.trim()) {
        return res.status(400).json({
          status: 'error',
          message: 'Search query is required',
        });
      }

      // NLP PROCESSING: Extract structured parameters t·ª´ natural language
      // VD: "v·ª£t yonex d∆∞·ªõi 2 tri·ªáu m√†u ƒë·ªè" ‚Üí {category: "v·ª£t", brand: "yonex", maxPrice: 2000000, color: "ƒë·ªè"}
      const searchParams = chatbotService.extractSearchParams(query);
      
      // DATABASE QUERY: T√¨m s·∫£n ph·∫©m v·ªõi parameters ƒë√£ extract + limit
      const products = await this.searchProducts({ ...searchParams, limit });

      // SUCCESS RESPONSE: Tr·∫£ v·ªÅ k·∫øt qu·∫£ search structured
      res.json({
        status: 'success',
        data: {
          query,                    // Original search query
          results: products,        // Matching products
          total: products.length,   // Count cho pagination
        },
      });
    } catch (error) {
      console.error('AI product search error:', error);
      // ERROR RESPONSE: Generic error message ƒë·ªÉ kh√¥ng expose system details
      res.status(500).json({
        status: 'error',
        message: 'Search failed',
      });
    }
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - Personalized recommendation engine (GET /api/chatbot/recommendations)
  async getRecommendations(req, res) {
    try {
      // PARSE PARAMS: L·∫•y parameters t·ª´ query string v·ªõi defaults
      const { userId, limit = 5, type = 'personal' } = req.query;

      // RECOMMENDATION ENGINE: G·ªçi service ƒë·ªÉ l·∫•y g·ª£i √Ω d·ª±a tr√™n behavioral analysis
      // Types: 'personal' (l·ªãch s·ª≠), 'trending' (hot), 'similar' (related), 'deals' (gi·∫£m gi√°)
      const recommendations =
        await chatbotService.getPersonalizedRecommendations(userId, {
          type,                     // Lo·∫°i recommendation algorithm
          limit: parseInt(limit),   // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr·∫£ v·ªÅ
        });

      // SUCCESS RESPONSE: Tr·∫£ v·ªÅ recommendations v·ªõi metadata
      res.json({
        status: 'success',
        data: {
          recommendations,  // Array s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω
          type,            // Lo·∫°i algorithm ƒë√£ s·ª≠ d·ª•ng
        },
      });
    } catch (error) {
      console.error('Recommendations error:', error);
      // ERROR HANDLING: Generic error response
      res.status(500).json({
        status: 'error',
        message: 'Failed to get recommendations',
      });
    }
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - Analytics tracking cho chatbot interactions (POST /api/chatbot/analytics)
  async trackAnalytics(req, res) {
    try {
      // PARSE ANALYTICS DATA: L·∫•y t·∫•t c·∫£ tracking parameters
      const { event, userId, sessionId, productId, value, metadata } = req.body;

      // TRACK EVENT: G·ª≠i data t·ªõi analytics service ƒë·ªÉ l∆∞u/x·ª≠ l√Ω
      // Events: 'message_sent', 'product_clicked', 'product_added_to_cart', 'purchase_completed'
      await chatbotService.trackAnalytics({
        event,        // Lo·∫°i event (message_sent, product_clicked, etc.)
        userId,       // ID user ƒë·ªÉ track behavior
        sessionId,    // Chat session ƒë·ªÉ group events
        productId,    // S·∫£n ph·∫©m li√™n quan (n·∫øu c√≥)
        value,        // Gi√° tr·ªã (price, quantity, etc.)
        metadata,     // Additional data (source: 'chatbot', intent, etc.)
        timestamp: new Date(),  // Th·ªùi gian event x·∫£y ra
      });

      // SUCCESS RESPONSE: Confirm tracking th√†nh c√¥ng
      res.json({
        status: 'success',
        message: 'Analytics tracked successfully',
      });
    } catch (error) {
      console.error('Analytics tracking error:', error);
      // ERROR RESPONSE: Kh√¥ng fail request n·∫øu analytics l·ªói
      res.status(500).json({
        status: 'error',
        message: 'Failed to track analytics',
      });
    }
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - Add product to cart from chat widget (POST /api/chatbot/cart/add)
  async addToCart(req, res) {
    try {
      // PARSE CART DATA: L·∫•y th√¥ng tin s·∫£n ph·∫©m c·∫ßn th√™m
      const { productId, variantId, quantity = 1, sessionId } = req.body;
      const userId = req.user.id;  // T·ª´ authenticate middleware

      // CART MANAGEMENT: T√¨m ho·∫∑c t·∫°o cart cho user
      let cart = await Cart.findOne({ where: { userId } });
      if (!cart) {
        // T·∫°o cart m·ªõi n·∫øu user ch∆∞a c√≥
        cart = await Cart.create({ userId });
      }

      // ADD ITEM: Th√™m s·∫£n ph·∫©m v√†o cart v·ªõi variant v√† quantity
      const cartItem = await CartItem.create({
        cartId: cart.id,  // Li√™n k·∫øt v·ªõi cart c·ªßa user
        productId,        // S·∫£n ph·∫©m ch√≠nh
        variantId,        // Variant (size, m√†u, etc.) - optional
        quantity,         // S·ªë l∆∞·ª£ng
      });

      // ANALYTICS TRACKING: Track conversion t·ª´ chat ‚Üí add to cart
      await chatbotService.trackAnalytics({
        event: 'product_added_to_cart',
        userId,
        sessionId,
        productId,
        metadata: { 
          quantity, 
          source: 'chatbot'  // ƒê√°nh d·∫•u ƒë√¢y l√† conversion t·ª´ chat
        },
        timestamp: new Date(),
      });

      // SUCCESS RESPONSE: Confirm th√™m v√†o cart th√†nh c√¥ng
      res.json({
        status: 'success',
        message: 'Product added to cart successfully',
        data: { cartItem },  // Tr·∫£ v·ªÅ cart item v·ª´a t·∫°o
      });
    } catch (error) {
      console.error('Add to cart error:', error);
      // ERROR RESPONSE: Generic error cho security
      res.status(500).json({
        status: 'error',
        message: 'Failed to add product to cart',
      });
    }
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - Database search engine v·ªõi Vietnamese-English keyword mapping
  async searchProducts(searchParams) {
    // BASE QUERY CONDITIONS: Ch·ªâ l·∫•y s·∫£n ph·∫©m active v√† c√≤n h√†ng
    const where = {
      status: 'active',  // Kh√¥ng l·∫•y draft/disabled products
      inStock: true,     // Ch·ªâ hi·ªÉn th·ªã s·∫£n ph·∫©m c√≤n h√†ng
    };

    // KEYWORD PROCESSING: X·ª≠ l√Ω keyword search v·ªõi bilingual support
    if (searchParams.keyword) {
      // VIETNAMESE-ENGLISH MAPPING: Cho ph√©p search b·∫±ng c·∫£ ti·∫øng Vi·ªát v√† English
      const keywordMapping = {
        // Equipment categories
        v·ª£t: ['racket', 'racquet', 'badminton racket'],
        'v·ª£t c·∫ßu l√¥ng': ['racket', 'racquet', 'badminton racket'],
        gi√†y: ['shoes', 'shoe', 'badminton shoes', 'court shoes'],
        'gi√†y c·∫ßu l√¥ng': ['badminton shoes', 'court shoes', 'shoes'],
        √°o: ['shirt', 'jersey', 'badminton shirt'],
        '√°o c·∫ßu l√¥ng': ['badminton shirt', 'jersey', 'badminton jersey'],
        qu·∫ßn: ['shorts', 'pants', 'badminton shorts'],
        'qu·∫ßn c·∫ßu l√¥ng': ['badminton shorts', 'shorts'],
        
        // Accessories
        grip: ['grip', 'overgrip', 'handle grip'],
        'c√°n v·ª£t': ['grip', 'overgrip', 'handle grip'],
        'd√¢y v·ª£t': ['string', 'racket string', 'badminton string'],
        'ph·ª• ki·ªán': ['accessories', 'accessory', 'grip', 'string'],
        
        // Brands (lu√¥n gi·ªØ nguy√™n)
        yonex: ['yonex'],
        victor: ['victor'],
        'li-ning': ['li-ning', 'lining'],
        mizuno: ['mizuno'],
        kawasaki: ['kawasaki'],
      };

      // EXPAND SEARCH TERMS: T·ª´ keyword ban ƒë·∫ßu th√†nh m·∫£ng c√°c terms
      const originalKeyword = searchParams.keyword.toLowerCase();
      let searchTerms = [originalKeyword];  // Gi·ªØ keyword g·ªëc

      // Th√™m English equivalents n·∫øu t√¨m th·∫•y Vietnamese keywords
      Object.keys(keywordMapping).forEach((viKeyword) => {
        if (originalKeyword.includes(viKeyword)) {
          searchTerms = [...searchTerms, ...keywordMapping[viKeyword]];
        }
      });

      // BUILD SEARCH CONDITIONS: T·∫°o OR conditions cho name v√† description
      const searchConditions = [];
      searchTerms.forEach((term) => {
        searchConditions.push(
          { name: { [Op.iLike]: `%${term}%` } },        // T√¨m trong t√™n s·∫£n ph·∫©m
          { description: { [Op.iLike]: `%${term}%` } }  // T√¨m trong m√¥ t·∫£
        );
      });

      where[Op.or] = searchConditions;  // Combine t·∫•t c·∫£ conditions b·∫±ng OR
    }

    // PRICE FILTERING: Th√™m ƒëi·ªÅu ki·ªán l·ªçc theo gi√°
    if (searchParams.minPrice) {
      where.price = { [Op.gte]: searchParams.minPrice };  // Gi√° >= minPrice
    }

    if (searchParams.maxPrice) {
      where.price = { ...where.price, [Op.lte]: searchParams.maxPrice };  // Gi√° <= maxPrice
    }

    // CATEGORY FILTERING: TODO - Implement category filter
    if (searchParams.category) {
      // TODO: Add JOIN v·ªõi categories table ƒë·ªÉ filter theo danh m·ª•c
    }

    // DATABASE QUERY: Execute search v·ªõi t·∫•t c·∫£ conditions
    const products = await Product.findAll({
      where,                          // Search conditions ƒë√£ build
      include: [
        {
          model: Category,
          as: 'categories',           // Include category info
          through: { attributes: [] }, // Kh√¥ng l·∫•y data t·ª´ junction table
        },
      ],
      limit: searchParams.limit || 20,  // Default 20 s·∫£n ph·∫©m
      order: [['createdAt', 'DESC']],   // S·∫£n ph·∫©m m·ªõi nh·∫•t tr∆∞·ªõc
    });

    return products;
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - L·∫•y top deals v·ªõi discount cao nh·∫•t
  async getBestDeals() {
    return await Product.findAll({
      where: {
        status: 'active',                     // Ch·ªâ l·∫•y s·∫£n ph·∫©m ƒëang active
        inStock: true,                        // C√≤n h√†ng
        compareAtPrice: { [Op.gt]: 0 },      // Ph·∫£i c√≥ gi√° so s√°nh (gi√° g·ªëc) ƒë·ªÉ t√≠nh discount
      },
      order: [
        [
          // S·∫Øp x·∫øp theo % discount gi·∫£m d·∫ßn (discount cao nh·∫•t tr∆∞·ªõc)
          // Formula: ((gi√° g·ªëc - gi√° hi·ªán t·∫°i) / gi√° g·ªëc) * 100%
          sequelize.literal(
            '((compare_at_price - price) / compare_at_price) DESC'
          ),
        ],
      ],
      limit: 10,  // Ch·ªâ l·∫•y 10 deals t·ªët nh·∫•t
    });
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - L·∫•y s·∫£n ph·∫©m trending (hi·ªán t·∫°i d·ª±a tr√™n featured flag)
  async getTrendingProducts() {
    // TODO: Trong t∆∞∆°ng lai c√≥ th·ªÉ d·ª±a tr√™n:
    // - Order frequency (s·ªë l∆∞·ª£ng b√°n trong 30 ng√†y qua)
    // - View count (l∆∞·ª£t xem s·∫£n ph·∫©m)
    // - Add to cart rate
    // - Search frequency
    
    return await Product.findAll({
      where: {
        status: 'active',   // S·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông
        inStock: true,      // C√≤n h√†ng
        featured: true,     // ƒê∆∞·ª£c admin ƒë√°nh d·∫•u l√† featured/hot
      },
      limit: 10,                      // L·∫•y 10 s·∫£n ph·∫©m trending
      order: [['createdAt', 'DESC']], // S·∫£n ph·∫©m m·ªõi featured tr∆∞·ªõc
    });
  }

  // @deprecated - DUPLICATE AI LOGIC - N√™n d√πng geminiChatbotService thay v√¨ method ri√™ng
  async generateAIResponse(prompt, context = {}) {
    try {
      // CHECK AI AVAILABILITY: N·∫øu kh√¥ng c√≥ Gemini API key th√¨ fallback
      if (!genAI) {
        return this.getTemplateResponse(prompt, context);
      }

      // GEMINI MODEL: S·ª≠ d·ª•ng c√πng model v·ªõi geminiChatbotService (gemini-2.0-flash)
      const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

      // PROMPT ENGINEERING: T·∫°o prompt c√≥ sales focus (kh√°c v·ªõi main service)
      const enhancedPrompt = `
        B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng th√¥ng minh c·ªßa BadmintonShop - m·ªôt c·ª≠a h√†ng ƒë·ªì c·∫ßu l√¥ng tr·ª±c tuy·∫øn.
        M·ª•c ti√™u ch√≠nh c·ªßa b·∫°n l√† gi√∫p kh√°ch h√†ng t√¨m v√† mua s·∫£n ph·∫©m c·∫ßu l√¥ng ph√π h·ª£p.
        
        Ng·ªØ c·∫£nh: ${JSON.stringify(context)}    // Context t·ª´ deprecated methods
        C√¢u h·ªèi kh√°ch h√†ng: ${prompt}            // Prompt kh√°c v·ªõi main flow
        
        H√£y tr·∫£ l·ªùi m·ªôt c√°ch:
        - Th√¢n thi·ªán v√† chuy√™n nghi·ªáp
        - T·∫≠p trung v√†o vi·ªác b√°n s·∫£n ph·∫©m c·∫ßu l√¥ng
        - ƒê·ªÅ xu·∫•t v·ª£t, gi√†y, √°o qu·∫ßn, ph·ª• ki·ªán c·ª• th·ªÉ khi c√≥ th·ªÉ
        - T∆∞ v·∫•n theo tr√¨nh ƒë·ªô ch∆°i c·ªßa kh√°ch h√†ng
        - T·∫°o c·∫£m gi√°c c·∫•p b√°ch ƒë·ªÉ khuy·∫øn kh√≠ch mua h√†ng      // Sales-focused
        - S·ª≠ d·ª•ng emoji c·∫ßu l√¥ng ph√π h·ª£p (üè∏üéØüëü)
        
        ƒê·ªô d√†i: Kho·∫£ng 2-3 c√¢u, ng·∫Øn g·ªçn nh∆∞ng hi·ªáu qu·∫£.   // Ng·∫Øn h∆°n main service
      `;

      // GEMINI API CALL: G·ª≠i request t·ªõi Gemini
      const result = await model.generateContent(enhancedPrompt);
      const response = result.response;
      return response.text();  // Raw text response (kh√°c v·ªõi main service tr·∫£ JSON)
    } catch (error) {
      console.error('AI response generation error:', error.message || error);
      // FALLBACK: N·∫øu Gemini fail th√¨ d√πng template responses
      return this.getTemplateResponse(prompt, context);
    }
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - Fallback template responses khi Gemini AI kh√¥ng available
  getTemplateResponse(prompt, context) {
    // TEMPLATE POOL: M·∫£ng c√°c response templates c·ª©ng ƒë·ªÉ fallback
    const templates = [
      // Template 1: H·ªèi th√™m th√¥ng tin ƒë·ªÉ t∆∞ v·∫•n t·ªët h∆°n
      'T√¥i hi·ªÉu b·∫°n ƒëang t√¨m ki·∫øm ƒë·ªì c·∫ßu l√¥ng ph√π h·ª£p! üè∏ ƒê·ªÉ gi√∫p b·∫°n t·ªët nh·∫•t, h√£y cho t√¥i bi·∫øt th√™m v·ªÅ tr√¨nh ƒë·ªô v√† s·ªü th√≠ch ch∆°i c·ªßa b·∫°n nh√©.',
      
      // Template 2: Gi·ªõi thi·ªáu s·∫£n ph·∫©m categories
      'Ch√†o b·∫°n! üëã BadmintonShop c√≥ r·∫•t nhi·ªÅu s·∫£n ph·∫©m c·∫ßu l√¥ng tuy·ªát v·ªùi. B·∫°n quan t√¢m ƒë·∫øn v·ª£t, gi√†y hay trang ph·ª•c nh·∫•t?',
      
      // Template 3: ∆Øu ƒë√£i v√† gi√° c·∫£ competitive
      'C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m! üéØ T√¥i s·∫Ω gi√∫p b·∫°n t√¨m nh·ªØng s·∫£n ph·∫©m c·∫ßu l√¥ng t·ªët nh·∫•t v·ªõi gi√° ∆∞u ƒë√£i.',
    ];
    
    // RANDOM SELECTION: Ch·ªçn ng·∫´u nhi√™n 1 template ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
    return templates[Math.floor(Math.random() * templates.length)];
  }

  // V·∫™N ƒêANG S·ª¨ D·ª§NG - Simple test endpoint kh√¥ng d√πng AI (POST /api/chatbot/simple-message)
  async handleSimpleMessage(req, res) {
    try {
      // PARSE INPUT: L·∫•y parameters t·ª´ request
      const { message, userId, sessionId, context = {} } = req.body;
      
      // DEBUG LOG: Ch·ªâ log trong development environment
      if (process.env.NODE_ENV !== 'production') {
        console.log('Received simple message:', { message, userId, sessionId });
      }

      // VALIDATION: Ki·ªÉm tra message required
      if (!message?.trim()) {
        return res.status(400).json({
          status: 'error',
          message: 'Message is required',
        });
      }

      // SIMPLE RESPONSE: Echo message + gi·ªõi thi·ªáu (kh√¥ng AI processing)
      const response = {
        // Echo user message + brand introduction
        response: `Ch√†o b·∫°n! B·∫°n v·ª´a n√≥i: "${message}". T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ ƒë·ªì c·∫ßu l√¥ng c·ªßa BadmintonShop! üè∏`,
        
        // Static suggestions cho quick actions
        suggestions: [
          'T√¨m v·ª£t c·∫ßu l√¥ng üéØ',     // Product search
          'Xem gi√†y c·∫ßu l√¥ng üëü',     // Category browse
          'Khuy·∫øn m√£i h√¥m nay üéâ',      // Promotions
          'T∆∞ v·∫•n thi·∫øt b·ªã üí°',        // Expert advice
        ],
      };

      // SUCCESS RESPONSE: Tr·∫£ v·ªÅ simple response
      res.json({
        status: 'success',
        data: response,
      });
    } catch (error) {
      console.error('Simple message error:', error.message || error);
      // ERROR RESPONSE: Generic error handling
      res.status(500).json({
        status: 'error',
        message: 'Failed to process simple message',
      });
    }
  }
}

module.exports = ChatbotController;
